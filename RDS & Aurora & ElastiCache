
Amazon RDS Relational Database Service
	It allows you to create databases in the cloud that managed by AWS using SQL as a query language
		Postgres, MySQL, MAriaDB, Oracle, MS SQL Server, Aurora (AWS Propriatery database)
	You cannot SSH into your instances
	RDS is a managed services
		Automated provisioning, OS patching
		Continuous backups and restore to specific timestamp
		Monitoring dashboard
		Read replicas fro improved read performance
		Multi AZ setup for Disaster Recovery
		Maintenance windows for upgrades
		Scaling capability (vertical and horizontal)
		Storage backed by EBS (gp2 or io1)
		
RDS Backup
	Backups are automatically enabled in RDS
	Transaction logs are backed-up  by RDS every 5 minutes
	7 days retention (can be increased to 35 days)
	DB snapshots manually triggered by the user
	
RDS - Storage Auto Scaling	
	Helps you to increase storage on your RDS DB instance dynamically
	When RDS detects you are running out of free database storage, it scales autmoatically
	Avoid manuelly scaling your database storage
	Useful for applications with unpredictable workloads
	Supports all RDS database engines

RDS Read Replicas
	Up to 5 read replicas within AZ, Cross AZ or Cross Region
	Use Case: You want to run a reporting application torun some analytics
	The production application is unaffected
	Read replicas are used for SELECT (not INSERT,UPDATE,DELETE)

RDS Read REplicas - Network Cost
	In AWS there is a network cost when data goes from one AZ to another
	For RDS Read REplicas within the same region, you do not pay that fee
	
Note: The Read Replicas can be setup as Multi AZ for Disaster Recovery (DR)

RDS - From Single AZ to Multi AZ
	Zero downtime operation (no need to stop the DB)
	Just click on "modify for the database"
	The following happens internally:
		A snapshot is taken
		A new DB is restored from the snapshot in a new AZ
		Syncronization is established between two databases

RDS Enryption and Security
	If the master is not encrypted, the read replicas cannot be encrypted
	Transparent Data Encryption (TDE) available for Oracle and SQL Server
	Encryption at rest
		is done only when you create the DB instance
		or: unencrypted DB -->snapshot --> copy snapshot as encrypted --> create DB from snapshot
	Your responsibility:
		check the ports/IP/security group inbound rules in DB's SG
		in-database user creation and permissions or manage through IAM
		creating a db with or without public access
		ensure parameter gorups or DB is configured to only allow SSL connection
	AWS Responsibility:
		No SSH access
		no manuel DB patching
		no manuel OS patching
		no way to audit the underlying instance
		

Amazon Aurora
	Aurora is proprietary technology from AWS (not open source)
	Aurora 5x performance improvement over MySQL on RDS, over 3x the perfromance of Postgres on RDS
	Aurora storage automatically grows in increments of 10GB, up to 128TB
	Aurora can have 15 replicas while MySQL has 5, and the replication process is faster
	Failover in Aurora is instantaneous. It is HA native
	Aurora costs more than RDS (20% more) - but is more efficient
	
Aurora High Availability and Read Scaling
	6 copies of your data accross 3 AZ
	4 copies out of 6 needed for writes
	3 copies out of 6 need for reads
	storage is striped across 100s of volumes
	Automated failover for master in less than 30 seconds
	Master + up to 15 Aurora Read Replicas serve reads
	Support for Cross Region Replication
	
Aurora Serverless
	Automated database instantiation and auto-scaling based on actual usage
	Good for infrequent, intermittent or unpredictable workloads
	No capacity planning needed
  Pay per second, can be more cost-effective
	
Aurora Machine Learning
	Enables you to add ML-based predictions to your applications via SQL
	Simple, optimized, and secure integration between Aurora and AWS ML services
	Supported services:
		Amazon SageMaker (use with any ML model)
		Amazon Comprehend (for sentiment analysis)
	You do not need to have ML experience
	Use Cases: fraud detection, ads targeting, sentiment analysis, product recommendations

Amazon ElastiCache Overview
	The same way RDS is to get managed Relational Databases...
	Elasticache is to get managed Redis or Memcached
	Caches are in-memory databases with really high performance, low latency
	Helps reduce load off databases for read intensive workloads
	Helps make your application stateless
	AWStake care of OS maintenance/patching, optimizations, setup, configuration, monitoring, failure recovery and backups
	Using ElastiCache involves heavy applicaiton code changes
	
ElastiCache - Cache Security
	Allcaches in ElastiCache:
		Do not support IAM authentication
		IAM policies on ElastiCacge are only used for AWS API-level security
	Redis AUTH
		You can set a "password/token" when you create a Redis cluster
		This is an extra level of security for your cache(on top of security groups)
		Support SSL in flight encryption
	Memcached
		Supports SASL-based authentication (advanced)

Patterns for ElastiCache
	Lazy Loading: All the read is cached, data can become stale in cache
	Write Through: Adds or update data in the cache when written to a DB
	Session Store: Store temporary session data in a cache(using TTL features)
	
ElastiCache - Redis Use Case
	Gaming Leaderboards are computationally complex
	Redis sorted sets guarantee both uniqueness and element ordering
	Each time a new element added, it is rankedn in real time, then added in correct order
